// Code generated by go generate. DO NOT EDIT.
// This file was generated by robots at 2020-04-08 04:22:19.767249 +0000 UTC

package optional

import (
	"encoding/json"
	"errors"
)

// Bool is an optional bool.
type Bool struct {
	val bool
	set bool
}

// MakeBool creates an optional.Bool from a bool.
func MakeBool(v bool) Bool {
	return Bool{val: v, set: true}
}

// Set sets the bool value.
func (b *Bool) Set(v bool) {
	*b = MakeBool(v)
}

// Unset unsets the bool value.
func (b *Bool) Unset() {
	*b = Bool{}
}

// Present returns whether or not the value is present.
func (b Bool) Present() bool {
	return b.set
}

// Get returns the bool value or panics if not present.
func (b Bool) Get() bool {
	if !b.Present() {
		panic("value not present")
	}
	return b.val
}

// GetOr returns the bool value or a default value if not present.
func (b Bool) GetOr(v bool) bool {
	if b.Present() {
		return b.val
	}
	return v
}

// GetOrErr returns the bool value or an error if not present.
func (b Bool) GetOrErr() (bool, error) {
	if !b.Present() {
		var zero bool
		return zero, errors.New("value not present")
	}
	return b.val, nil
}

// If calls the function fn with the value if the value is present.
func (b Bool) If(fn func(bool)) {
	if b.Present() {
		fn(b.val)
	}
}

// Map applies the function fn to the contained value (if any) and returns a new
// option value.
func (b Bool) Map(fn func(bool) bool) Bool {
	if b.Present() {
		return MakeBool(fn(b.val))
	}
	return b
}

// And returns an empty Bool option value if not present, otherwise returns
// optb.
func (b Bool) And(optb Bool) Bool {
	if b.Present() {
		return optb
	}
	return Bool{}
}

// Or returns the Bool option value if present, otherwise returns optb.
func (b Bool) Or(optb Bool) Bool {
	if b.Present() {
		return b
	}
	return optb
}

// MarshalJSON implements the json.Marshaler interface.
func (b Bool) MarshalJSON() ([]byte, error) {
	if b.Present() {
		return json.Marshal(b.val)
	}
	return json.Marshal(nil)
}

// UnmarshalJSON implements the json.Unmarshaler interface.
func (b *Bool) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		b.Unset()
		return nil
	}

	var value bool
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}

	b.Set(value)
	return nil
}
