// Code generated by go generate. DO NOT EDIT.
// This file was generated by robots at 2020-04-07 21:41:40.468347 +0000 UTC

package foo

import (
	"encoding/json"
	"errors"
)

// OptionalFoo is an optional Foo.
type OptionalFoo struct {
	val Foo
	set bool
}

// MakeOptionalFoo creates an optional.OptionalFoo from a Foo.
func MakeOptionalFoo(v Foo) OptionalFoo {
	return OptionalFoo{val: v, set: true}
}

// Set sets the Foo value.
func (o *OptionalFoo) Set(v Foo) {
	*o = OptionalFoo{val: v, set: true}
}

// Unset unsets the Foo value.
func (o *OptionalFoo) Unset() {
	*o = OptionalFoo{}
}

// Get returns the Foo value or an error if not present.
func (o OptionalFoo) Get() (Foo, error) {
	if !o.Present() {
		var zero Foo
		return zero, errors.New("value not present")
	}
	return o.val, nil
}

// Present returns whether or not the value is present.
func (o OptionalFoo) Present() bool {
	return o.set
}

// OrElse returns the Foo value or a default value if the value is not present.
func (o OptionalFoo) OrElse(v Foo) Foo {
	if o.Present() {
		return o.val
	}
	return v
}

// If calls the function f with the value if the value is present.
func (o OptionalFoo) If(fn func(Foo)) {
	if o.Present() {
		fn(o.val)
	}
}

// MarshalJSON implements the json.Marshaler interface.
func (o OptionalFoo) MarshalJSON() ([]byte, error) {
	if o.Present() {
		return json.Marshal(o.val)
	}
	return json.Marshal(nil)
}

// UnmarshalJSON implements the json.Unmarshaler interface.
func (o *OptionalFoo) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		o.Unset()
		return nil
	}

	var value Foo
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}

	o.Set(value)
	return nil
}
