// Code generated by go generate
// This file was generated by robots at 2020-04-07 21:28:54.215851 +0000 UTC

package optional

import (
	"encoding/json"
	"errors"
)

// Complex64 is an optional complex64.
type Complex64 struct {
	val complex64
	set bool
}

// MakeComplex64 creates an optional.Complex64 from a complex64.
func MakeComplex64(v complex64) Complex64 {
	return Complex64{val: v, set: true}
}

// Set sets the complex64 value.
func (c *Complex64) Set(v complex64) {
	*c = Complex64{val: v, set: true}
}

// Unset unsets the complex64 value.
func (c *Complex64) Unset() {
	*c = Complex64{}
}

// Get returns the complex64 value or an error if not present.
func (c Complex64) Get() (complex64, error) {
	if !c.Present() {
		var zero complex64
		return zero, errors.New("value not present")
	}
	return c.val, nil
}

// Present returns whether or not the value is present.
func (c Complex64) Present() bool {
	return c.set
}

// OrElse returns the complex64 value or a default value if the value is not present.
func (c Complex64) OrElse(v complex64) complex64 {
	if c.Present() {
		return c.val
	}
	return v
}

// If calls the function f with the value if the value is present.
func (c Complex64) If(fn func(complex64)) {
	if c.Present() {
		fn(c.val)
	}
}

func (c Complex64) MarshalJSON() ([]byte, error) {
	if c.Present() {
		return json.Marshal(c.val)
	}
	return json.Marshal(nil)
}

func (c *Complex64) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		c.Unset()
		return nil
	}

	var value complex64
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}

	c.Set(value)
	return nil
}
