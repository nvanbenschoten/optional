// Code generated by go generate. DO NOT EDIT.
// This file was generated by robots at 2020-04-08 04:05:13.673431 +0000 UTC

package optional

import (
	"encoding/json"
	"errors"
)

// Error is an optional error.
type Error struct {
	val error
	set bool
}

// MakeError creates an optional.Error from a error.
func MakeError(v error) Error {
	return Error{val: v, set: true}
}

// Set sets the error value.
func (e *Error) Set(v error) {
	*e = Error{val: v, set: true}
}

// Unset unsets the error value.
func (e *Error) Unset() {
	*e = Error{}
}

// Present returns whether or not the value is present.
func (e Error) Present() bool {
	return e.set
}

// Get returns the error value or panics if not present.
func (e Error) Get() error {
	if !e.Present() {
		panic("value not present")
	}
	return e.val
}

// GetOr returns the error value or a default value if not present.
func (e Error) GetOr(v error) error {
	if e.Present() {
		return e.val
	}
	return v
}

// GetOrErr returns the error value or an error if not present.
func (e Error) GetOrErr() (error, error) {
	if !e.Present() {
		var zero error
		return zero, errors.New("value not present")
	}
	return e.val, nil
}

// If calls the function fn with the value if the value is present.
func (e Error) If(fn func(error)) {
	if e.Present() {
		fn(e.val)
	}
}

// Map applies the function fn to the contained value (if any) and returns a new
// option value.
func (e Error) Map(fn func(error) error) Error {
	if e.Present() {
		return MakeError(fn(e.val))
	}
	return e
}

// And returns an empty Error option value if not present, otherwise returns
// optb.
func (e Error) And(optb Error) Error {
	if e.Present() {
		return optb
	}
	return Error{}
}

// Or returns the Error option value if present, otherwise returns optb.
func (e Error) Or(optb Error) Error {
	if e.Present() {
		return e
	}
	return optb
}

// MarshalJSON implements the json.Marshaler interface.
func (e Error) MarshalJSON() ([]byte, error) {
	if e.Present() {
		return json.Marshal(e.val)
	}
	return json.Marshal(nil)
}

// UnmarshalJSON implements the json.Unmarshaler interface.
func (e *Error) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		e.Unset()
		return nil
	}

	var value error
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}

	e.Set(value)
	return nil
}
