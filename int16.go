// Code generated by go generate
// This file was generated by robots at 2020-04-07 21:28:56.320157 +0000 UTC

package optional

import (
	"encoding/json"
	"errors"
)

// Int16 is an optional int16.
type Int16 struct {
	val int16
	set bool
}

// MakeInt16 creates an optional.Int16 from a int16.
func MakeInt16(v int16) Int16 {
	return Int16{val: v, set: true}
}

// Set sets the int16 value.
func (i *Int16) Set(v int16) {
	*i = Int16{val: v, set: true}
}

// Unset unsets the int16 value.
func (i *Int16) Unset() {
	*i = Int16{}
}

// Get returns the int16 value or an error if not present.
func (i Int16) Get() (int16, error) {
	if !i.Present() {
		var zero int16
		return zero, errors.New("value not present")
	}
	return i.val, nil
}

// Present returns whether or not the value is present.
func (i Int16) Present() bool {
	return i.set
}

// OrElse returns the int16 value or a default value if the value is not present.
func (i Int16) OrElse(v int16) int16 {
	if i.Present() {
		return i.val
	}
	return v
}

// If calls the function f with the value if the value is present.
func (i Int16) If(fn func(int16)) {
	if i.Present() {
		fn(i.val)
	}
}

func (i Int16) MarshalJSON() ([]byte, error) {
	if i.Present() {
		return json.Marshal(i.val)
	}
	return json.Marshal(nil)
}

func (i *Int16) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		i.Unset()
		return nil
	}

	var value int16
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}

	i.Set(value)
	return nil
}
