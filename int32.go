// Code generated by go generate. DO NOT EDIT.
// This file was generated by robots at 2020-04-07 21:41:02.242427 +0000 UTC

package optional

import (
	"encoding/json"
	"errors"
)

// Int32 is an optional int32.
type Int32 struct {
	val int32
	set bool
}

// MakeInt32 creates an optional.Int32 from a int32.
func MakeInt32(v int32) Int32 {
	return Int32{val: v, set: true}
}

// Set sets the int32 value.
func (i *Int32) Set(v int32) {
	*i = Int32{val: v, set: true}
}

// Unset unsets the int32 value.
func (i *Int32) Unset() {
	*i = Int32{}
}

// Get returns the int32 value or an error if not present.
func (i Int32) Get() (int32, error) {
	if !i.Present() {
		var zero int32
		return zero, errors.New("value not present")
	}
	return i.val, nil
}

// Present returns whether or not the value is present.
func (i Int32) Present() bool {
	return i.set
}

// OrElse returns the int32 value or a default value if the value is not present.
func (i Int32) OrElse(v int32) int32 {
	if i.Present() {
		return i.val
	}
	return v
}

// If calls the function f with the value if the value is present.
func (i Int32) If(fn func(int32)) {
	if i.Present() {
		fn(i.val)
	}
}

// MarshalJSON implements the json.Marshaler interface.
func (i Int32) MarshalJSON() ([]byte, error) {
	if i.Present() {
		return json.Marshal(i.val)
	}
	return json.Marshal(nil)
}

// UnmarshalJSON implements the json.Unmarshaler interface.
func (i *Int32) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		i.Unset()
		return nil
	}

	var value int32
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}

	i.Set(value)
	return nil
}
