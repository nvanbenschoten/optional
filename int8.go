// Code generated by go generate. DO NOT EDIT.
// This file was generated by robots at 2020-04-08 04:22:24.401731 +0000 UTC

package optional

import (
	"encoding/json"
	"errors"
)

// Int8 is an optional int8.
type Int8 struct {
	val int8
	set bool
}

// MakeInt8 creates an optional.Int8 from a int8.
func MakeInt8(v int8) Int8 {
	return Int8{val: v, set: true}
}

// Set sets the int8 value.
func (i *Int8) Set(v int8) {
	*i = MakeInt8(v)
}

// Unset unsets the int8 value.
func (i *Int8) Unset() {
	*i = Int8{}
}

// Present returns whether or not the value is present.
func (i Int8) Present() bool {
	return i.set
}

// Get returns the int8 value or panics if not present.
func (i Int8) Get() int8 {
	if !i.Present() {
		panic("value not present")
	}
	return i.val
}

// GetOr returns the int8 value or a default value if not present.
func (i Int8) GetOr(v int8) int8 {
	if i.Present() {
		return i.val
	}
	return v
}

// GetOrErr returns the int8 value or an error if not present.
func (i Int8) GetOrErr() (int8, error) {
	if !i.Present() {
		var zero int8
		return zero, errors.New("value not present")
	}
	return i.val, nil
}

// If calls the function fn with the value if the value is present.
func (i Int8) If(fn func(int8)) {
	if i.Present() {
		fn(i.val)
	}
}

// Map applies the function fn to the contained value (if any) and returns a new
// option value.
func (i Int8) Map(fn func(int8) int8) Int8 {
	if i.Present() {
		return MakeInt8(fn(i.val))
	}
	return i
}

// And returns an empty Int8 option value if not present, otherwise returns
// optb.
func (i Int8) And(optb Int8) Int8 {
	if i.Present() {
		return optb
	}
	return Int8{}
}

// Or returns the Int8 option value if present, otherwise returns optb.
func (i Int8) Or(optb Int8) Int8 {
	if i.Present() {
		return i
	}
	return optb
}

// MarshalJSON implements the json.Marshaler interface.
func (i Int8) MarshalJSON() ([]byte, error) {
	if i.Present() {
		return json.Marshal(i.val)
	}
	return json.Marshal(nil)
}

// UnmarshalJSON implements the json.Unmarshaler interface.
func (i *Int8) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		i.Unset()
		return nil
	}

	var value int8
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}

	i.Set(value)
	return nil
}
