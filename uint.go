// Code generated by go generate. DO NOT EDIT.
// This file was generated by robots at 2020-04-08 04:22:26.145387 +0000 UTC

package optional

import (
	"encoding/json"
	"errors"
)

// Uint is an optional uint.
type Uint struct {
	val uint
	set bool
}

// MakeUint creates an optional.Uint from a uint.
func MakeUint(v uint) Uint {
	return Uint{val: v, set: true}
}

// Set sets the uint value.
func (u *Uint) Set(v uint) {
	*u = MakeUint(v)
}

// Unset unsets the uint value.
func (u *Uint) Unset() {
	*u = Uint{}
}

// Present returns whether or not the value is present.
func (u Uint) Present() bool {
	return u.set
}

// Get returns the uint value or panics if not present.
func (u Uint) Get() uint {
	if !u.Present() {
		panic("value not present")
	}
	return u.val
}

// GetOr returns the uint value or a default value if not present.
func (u Uint) GetOr(v uint) uint {
	if u.Present() {
		return u.val
	}
	return v
}

// GetOrErr returns the uint value or an error if not present.
func (u Uint) GetOrErr() (uint, error) {
	if !u.Present() {
		var zero uint
		return zero, errors.New("value not present")
	}
	return u.val, nil
}

// If calls the function fn with the value if the value is present.
func (u Uint) If(fn func(uint)) {
	if u.Present() {
		fn(u.val)
	}
}

// Map applies the function fn to the contained value (if any) and returns a new
// option value.
func (u Uint) Map(fn func(uint) uint) Uint {
	if u.Present() {
		return MakeUint(fn(u.val))
	}
	return u
}

// And returns an empty Uint option value if not present, otherwise returns
// optb.
func (u Uint) And(optb Uint) Uint {
	if u.Present() {
		return optb
	}
	return Uint{}
}

// Or returns the Uint option value if present, otherwise returns optb.
func (u Uint) Or(optb Uint) Uint {
	if u.Present() {
		return u
	}
	return optb
}

// MarshalJSON implements the json.Marshaler interface.
func (u Uint) MarshalJSON() ([]byte, error) {
	if u.Present() {
		return json.Marshal(u.val)
	}
	return json.Marshal(nil)
}

// UnmarshalJSON implements the json.Unmarshaler interface.
func (u *Uint) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		u.Unset()
		return nil
	}

	var value uint
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}

	u.Set(value)
	return nil
}
